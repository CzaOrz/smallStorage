import aiohttp

async with aiohttp.ClientSession() as session:
    async with session.get('http://httpbin.org/get') as resp:
        print(resp.status)
        print(await resp.text())


params = {'key1': 'value1', 'key2': 'value2'}   # 'http://httpbin.org/get?key2=value2&key1=value1'
params = [('key', 'value1'), ('key', 'value2')]   # if same key, by this way you can get same result

session.get('http://httpbin.org/get', params=params)   
session.post('http://httpbin.org/post', data={'data':'data'})

resp.status
await resp.text()   # await resp.text(encoding='windows-1251')
await resp.read()  # return the bytes of body


# JSON request
async with aiohttp.ClientSession() as session:
    async with session.post(url, json={'test': 'data'})

import ujson  # ujson library is faster than standard json
async with aiohttp.ClientSession(json_serialize) as session:
    await session.post(url, json={'test': 'data'})


# POST Files
files = {'file': open('test.txt', rb)}
await session.post(url, data=files)  # send files stream by data

data = aiohttp.FormData()
data.add_field('files', open('test.txt', 'rb'), filename="test", content_type="text/plain")
await session.post(url, data=files)


# Using generate to read files   --  Deprecated now
# use async_generator library as workaround.?
async def file_sender(file_name=None):
    async with aiofiles.open(filename, 'rb') as f:
        chuck = await f.read(64*1024)
        while chuck:
            yield chunk
            chunk = await f.read(64*1024)

async with session.post(url, data=file_sender(filename)) as resp:
    print(await resp.text())


# TIMEOUT
timeout = aiohttp.ClientTimeout(total=60)
async with aiohttp.ClientSession(timeout=timeout) as session:
    async with session.get(url, timeout=timeout) as resp:  # overridden former


