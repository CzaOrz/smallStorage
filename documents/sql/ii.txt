选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。
通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键

外键并不是通过列名实现的，而是通过定义外键约束实现的：
ALTER TABLE students
ADD CONSTRAINT fk_class_id
FOREIGN KEY (class_id)    -> 指定了class_id作为外键
REFERENCES classes (id);    -> 指定了这个外键将关联到classes表的id列（即classes表的主键）

ALTER TABLE students
DROP FOREIGN KEY fk_class_id;   -> 要删除一个外键约束，也是通过ALTER TABLE实现的：删除列是通过DROP COLUMN ...实现的。

->如果要经常根据score列进行查询，就可以对score列创建索引：
ALTER TABLE students
ADD INDEX idx_score (score);
->使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上
ALTER TABLE students
ADD INDEX idx_name_score (name, score);


ALTER TABLE students
ADD UNIQUE INDEX uni_name (name);
->通过UNIQUE关键字我们就添加了一个唯一索引, 也可以只对某一列添加一个唯一约束而不创建唯一索引：
ALTER TABLE students
ADD CONSTRAINT uni_name UNIQUE (name);


不带FROM子句的SELECT语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效, 许多检测工具会执行一条SELECT 1;来测试数据库连接。

SELECT * FROM students;
SELECT * FROM students WHERE score >= 80;
SELECT * FROM students WHERE score >= 80 AND gender = 'M';
SELECT * FROM students WHERE score >= 80 OR gender = 'M';
SELECT * FROM students WHERE NOT class_id = 2;  -> NOT条件NOT class_id = 2其实等价于class_id <> 2
SELECT * FROM students WHERE (score < 80 OR score > 90) AND gender = 'M';
-> 使用LIKE判断相似	name LIKE 'ab%'	name LIKE '%bc%'	%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd'

->使用投影查询, 只希望返回某些列的数据
SELECT id, score, name FROM students;
SELECT id, score points, name FROM students;  -> 将列名score重命名为points，而id和name列名保持不变
SELECT id, score points, name FROM students WHERE gender = 'M';

->排序
SELECT id, name, gender, score FROM students ORDER BY score;   -> 按照成绩从低到高进行排序
SELECT id, name, gender, score FROM students ORDER BY score DESC;   -> 按照成绩从高到底排序, 我们可以加上DESC表示“倒序”：
SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;   -> score列有相同的数据, 进一步排序，可以继续添加列名。
SELECT id, name, gender, score FROM students WHERE class_id = 1 ORDER BY score DESC;

->把结果集分页，每页3条记录。要获取第1页的记录，可以使用LIMIT 3 OFFSET 0：
SELECT id, name, gender, score FROM students ORDER BY score DESC LIMIT 3 OFFSET 0;  -> 
SELECT id, name, gender, score FROM students ORDER BY score DESC LIMIT 3 OFFSET 3;  -> 要查询第2页,需要“跳过”头3条记录,把OFFSET设定为3：
在MySQL中，LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15。


->聚合查询,COUNT(*)表示查询所有列的行数, 结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(*)
SELECT COUNT(*) FROM students;
SELECT COUNT(*) num FROM students;  ->  聚合查询并设置结果集的列名为num
SELECT COUNT(*) boys FROM students WHERE gender = 'M';  -> 可以方便地统计出有多少男生、多少女生、多少80分以上的学生

函数	说明
SUM	计算某一列的合计值，该列必须为数值类型
AVG	计算某一列的平均值，该列必须为数值类型
MAX	计算某一列的最大值
MIN	计算某一列的最小值

-> 按class_id分组:
SELECT COUNT(*) num FROM students GROUP BY class_id;  -> GROUP BY子句指定了按class_id分组, 会把class_id相同的列先分组，再分别计算
SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;   -> 各个班级的学生人数。
-> 使用多个列进行分组, 统计各班的男生和女生人数：
SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;
SELECT class_id, AVG(score) from students group by class_id;  -> 查询查出每个班级的平均分
SELECT class_id, gender, AVG(score) from students group by class_id, gender;   -> 询查出每个班级男生和女生的平均分：





SELECT * FROM students, classes;   -> 查询多张表
SELECT
    students.id sid,
    students.name,
    students.gender,
    students.score,
    classes.id cid,
    classes.name cname
FROM students, classes;   -> 可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：

SELECT
    s.id sid,
    s.name,
    s.gender,
    s.score,
    c.id cid,
    c.name cname
FROM students s, classes c;  -> SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点

SELECT
    s.id sid,
    s.name,
    s.gender,
    s.score,
    c.id cid,
    c.name cname
FROM students s, classes c
WHERE s.gender = 'M' AND c.id = 1;  -> 满足条件s.gender = 'M'和c.id = 1。添加WHERE条件后结果集的数量大大减少了。


->选出所有学生，同时返回班级名称l, 连接查询INNER JOIN
SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
FROM students s
INNER JOIN classes c
ON s.class_id = c.id;
->注意INNER JOIN查询的写法是：
->先确定主表，仍然使用FROM <表1>的语法；
->再确定需要连接的表，使用INNER JOIN <表2>的语法；
->然后确定连接条件，使用ON <条件...>，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；
->可选：加上WHERE子句、ORDER BY等子句。

INNER JOIN只返回同时存在于两张表的行数据
RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段
LEFT OUTER JOIN则返回左表都存在的行。
我们使用FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：
->SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;









->INSERT语句的基本语法是：如果一个字段有默认值，那么在INSERT语句中也可以不出现。
INSERT INTO <表名> (字段1, 字段2, ...) VALUES (值1, 值2, ...);

->UPDATE语句的基本语法是：
UPDATE <表名> SET 字段1=值1, 字段2=值2, ... WHERE ...;
UPDATE students SET name='小牛', score=77 WHERE id>=5 AND id<=7;
UPDATE students SET score=60;  -> 这时，整个表的所有记录都会被更新。

->DELETE语句的基本语法是：
DELETE FROM <表名> WHERE ...;
DELETE FROM students WHERE id=1;  -> 意到DELETE语句的WHERE条件也是用来筛选需要删除的行，因此和UPDATE类似，DELETE语句也可以一次删除多条记录
DELETE FROM students WHERE id>=5 AND id<=7;
DELETE FROM students;   ->  不带WHERE条件的DELETE语句会删除整个表的数据：




mysql> SHOW DATABASES;
mysql> CREATE DATABASE test;
mysql> DROP DATABASE test;
mysql> USE test;
mysql> SHOW TABLES;
mysql> DESC students;   -> 要查看一个表的结构，使用命令：
mysql> SHOW CREATE TABLE students;   -> 还可以使用以下命令查看创建表的SQL语句：
mysql> DROP TABLE students;
ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;   -> 如果要给students表新增一列birth，使用：
ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;   -> 要修改birth列，例如把列名改为birthday，类型改为VARCHAR(20)：
ALTER TABLE students DROP COLUMN birthday;  -> 删除列，使用：

-> 插入或替换. 如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用REPLACE语句，这样就不必先查询，再决定是否先删除再插入：
-> 若id=1的记录不存在，REPLACE语句将插入新记录，否则，当前id=1的记录将被删除，然后再插入新记录。
REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);  

-> 插入或更新, 如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用INSERT INTO ... ON DUPLICATE KEY UPDATE ...语句：
-> 若id=1的记录不存在，INSERT语句将插入新记录，否则，当前id=1的记录将被更新，更新的字段由UPDATE指定。
INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99) ON DUPLICATE KEY UPDATE name='小明', gender='F', score=99;

-> 插入或忽略, 如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用INSERT IGNORE INTO ...语句：
-> 若id=1的记录不存在，INSERT语句将插入新记录，否则，不执行任何操作。
INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);

-> 快照, 如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合CREATE TABLE和SELECT：
-> 新创建的表结构和SELECT使用的表结构完全一致。
CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;


->例如，创建一个统计成绩的表statistics，记录各班的平均成绩：
CREATE TABLE statistics (
    id BIGINT NOT NULL AUTO_INCREMENT,
    class_id BIGINT NOT NULL,
    average DOUBLE NOT NULL,
    PRIMARY KEY (id)
);
->然后，我们就可以用一条语句写入各班的平均成绩：
INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;







对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。
要手动把多条SQL语句作为一个事务执行，使用BEGIN开启一个事务，使用COMMIT提交一个事务，这种事务被称为显式事务，例如，把上述的转账操作作为一个显式事务：
BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE id = 1;
UPDATE accounts SET balance = balance + 100 WHERE id = 2;
COMMIT;